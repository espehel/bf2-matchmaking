/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./../../types/src/database-types.generated";

export const publicChallengeStatusSchema = z.union([
  z.literal("open"),
  z.literal("pending"),
  z.literal("accepted"),
  z.literal("closed"),
  z.literal("expired"),
]);

export const publicDraftTypeSchema = z.union([
  z.literal("captain"),
  z.literal("random"),
]);

export const publicMatchRoleSchema = z.union([
  z.literal("inf"),
  z.literal("sl"),
  z.literal("tank"),
  z.literal("apc"),
  z.literal("cmd"),
  z.literal("heli"),
]);

export const publicMatchStatusSchema = z.union([
  z.literal("Open"),
  z.literal("Scheduled"),
  z.literal("Summoning"),
  z.literal("Drafting"),
  z.literal("Ongoing"),
  z.literal("Finished"),
  z.literal("Closed"),
  z.literal("Deleted"),
]);

export const publicMatchTypeSchema = z.union([
  z.literal("Mix"),
  z.literal("PCW"),
  z.literal("League"),
  z.literal("Cup"),
  z.literal("Ladder"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const adminRolesRowSchema = z.object({
  created_at: z.string(),
  match_admin: z.boolean(),
  player_admin: z.boolean(),
  server_admin: z.boolean(),
  system_admin: z.boolean(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const adminRolesInsertSchema = z.object({
  created_at: z.string().optional(),
  match_admin: z.boolean().optional(),
  player_admin: z.boolean().optional(),
  server_admin: z.boolean().optional(),
  system_admin: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const adminRolesUpdateSchema = z.object({
  created_at: z.string().optional(),
  match_admin: z.boolean().optional(),
  player_admin: z.boolean().optional(),
  server_admin: z.boolean().optional(),
  system_admin: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const adminRolesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("admin_roles_user_id_fkey1"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("user_id")]),
  }),
]);

export const challengeTeamsRowSchema = z.object({
  config: z.number(),
  created_at: z.string(),
  match_count: z.number(),
  rating: z.number(),
  team_id: z.number(),
});

export const challengeTeamsInsertSchema = z.object({
  config: z.number(),
  created_at: z.string().optional(),
  match_count: z.number().optional(),
  rating: z.number().optional(),
  team_id: z.number(),
});

export const challengeTeamsUpdateSchema = z.object({
  config: z.number().optional(),
  created_at: z.string().optional(),
  match_count: z.number().optional(),
  rating: z.number().optional(),
  team_id: z.number().optional(),
});

export const challengeTeamsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("challenge_teams_config_fkey"),
    columns: z.tuple([z.literal("config")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("match_configs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("challenge_teams_team_id_fkey"),
    columns: z.tuple([z.literal("team_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const challengesRowSchema = z.object({
  away_accepted: z.boolean(),
  away_map: z.number().nullable(),
  away_server: z.string().nullable(),
  away_team: z.number().nullable(),
  config: z.number(),
  created_at: z.string(),
  home_accepted: z.boolean(),
  home_map: z.number(),
  home_server: z.string(),
  home_team: z.number(),
  id: z.number(),
  match: z.number().nullable(),
  scheduled_at: z.string(),
  status: publicChallengeStatusSchema,
});

export const challengesInsertSchema = z.object({
  away_accepted: z.boolean().optional(),
  away_map: z.number().optional().nullable(),
  away_server: z.string().optional().nullable(),
  away_team: z.number().optional().nullable(),
  config: z.number(),
  created_at: z.string().optional(),
  home_accepted: z.boolean().optional(),
  home_map: z.number(),
  home_server: z.string(),
  home_team: z.number(),
  id: z.number().optional(),
  match: z.number().optional().nullable(),
  scheduled_at: z.string(),
  status: publicChallengeStatusSchema.optional(),
});

export const challengesUpdateSchema = z.object({
  away_accepted: z.boolean().optional(),
  away_map: z.number().optional().nullable(),
  away_server: z.string().optional().nullable(),
  away_team: z.number().optional().nullable(),
  config: z.number().optional(),
  created_at: z.string().optional(),
  home_accepted: z.boolean().optional(),
  home_map: z.number().optional(),
  home_server: z.string().optional(),
  home_team: z.number().optional(),
  id: z.number().optional(),
  match: z.number().optional().nullable(),
  scheduled_at: z.string().optional(),
  status: publicChallengeStatusSchema.optional(),
});

export const challengesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_challenges_away_map_fkey"),
    columns: z.tuple([z.literal("away_map")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("maps"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_challenges_away_server_fkey"),
    columns: z.tuple([z.literal("away_server")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("servers"),
    referencedColumns: z.tuple([z.literal("ip")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_challenges_away_team_fkey"),
    columns: z.tuple([z.literal("away_team")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_challenges_config_fkey"),
    columns: z.tuple([z.literal("config")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("match_configs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_challenges_home_map_fkey"),
    columns: z.tuple([z.literal("home_map")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("maps"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_challenges_home_server_fkey"),
    columns: z.tuple([z.literal("home_server")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("servers"),
    referencedColumns: z.tuple([z.literal("ip")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_challenges_home_team_fkey"),
    columns: z.tuple([z.literal("home_team")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_challenges_match_fkey"),
    columns: z.tuple([z.literal("match")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const eventMatchesRowSchema = z.object({
  away_accepted: z.boolean(),
  created_at: z.string(),
  event: z.number(),
  home_accepted: z.boolean(),
  match: z.number(),
  round: z.number(),
});

export const eventMatchesInsertSchema = z.object({
  away_accepted: z.boolean().optional(),
  created_at: z.string().optional(),
  event: z.number(),
  home_accepted: z.boolean().optional(),
  match: z.number(),
  round: z.number(),
});

export const eventMatchesUpdateSchema = z.object({
  away_accepted: z.boolean().optional(),
  created_at: z.string().optional(),
  event: z.number().optional(),
  home_accepted: z.boolean().optional(),
  match: z.number().optional(),
  round: z.number().optional(),
});

export const eventMatchesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("event_matches_event_fkey"),
    columns: z.tuple([z.literal("event")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("events"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("event_matches_match_fkey"),
    columns: z.tuple([z.literal("match")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("event_matches_round_fkey"),
    columns: z.tuple([z.literal("round")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("event_rounds"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const eventRoundsRowSchema = z.object({
  created_at: z.string(),
  event: z.number(),
  id: z.number(),
  label: z.string(),
  open: z.boolean(),
  start_at: z.string(),
});

export const eventRoundsInsertSchema = z.object({
  created_at: z.string().optional(),
  event: z.number(),
  id: z.number().optional(),
  label: z.string(),
  open: z.boolean().optional(),
  start_at: z.string(),
});

export const eventRoundsUpdateSchema = z.object({
  created_at: z.string().optional(),
  event: z.number().optional(),
  id: z.number().optional(),
  label: z.string().optional(),
  open: z.boolean().optional(),
  start_at: z.string().optional(),
});

export const eventRoundsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("event_rounds_event_fkey"),
    columns: z.tuple([z.literal("event")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("events"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const eventTeamsRowSchema = z.object({
  created_at: z.string(),
  event: z.number(),
  team: z.number(),
});

export const eventTeamsInsertSchema = z.object({
  created_at: z.string().optional(),
  event: z.number(),
  team: z.number(),
});

export const eventTeamsUpdateSchema = z.object({
  created_at: z.string().optional(),
  event: z.number().optional(),
  team: z.number().optional(),
});

export const eventTeamsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("event_teams_event_fkey"),
    columns: z.tuple([z.literal("event")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("events"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("event_teams_team_fkey"),
    columns: z.tuple([z.literal("team")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const eventsRowSchema = z.object({
  config: z.number(),
  created_at: z.string(),
  id: z.number(),
  name: z.string(),
  open: z.boolean(),
  owner: z.string(),
});

export const eventsInsertSchema = z.object({
  config: z.number(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string(),
  open: z.boolean().optional(),
  owner: z.string(),
});

export const eventsUpdateSchema = z.object({
  config: z.number().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  open: z.boolean().optional(),
  owner: z.string().optional(),
});

export const eventsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("events_config_fkey"),
    columns: z.tuple([z.literal("config")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("match_configs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("events_owner_fkey"),
    columns: z.tuple([z.literal("owner")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const generatedServersRowSchema = z.object({
  address: z.string().nullable(),
  created_at: z.string(),
  id: z.number(),
  instance: z.string().nullable(),
  match_id: z.number().nullable(),
  region: z.string(),
});

export const generatedServersInsertSchema = z.object({
  address: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  instance: z.string().optional().nullable(),
  match_id: z.number().optional().nullable(),
  region: z.string(),
});

export const generatedServersUpdateSchema = z.object({
  address: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  instance: z.string().optional().nullable(),
  match_id: z.number().optional().nullable(),
  region: z.string().optional(),
});

export const generatedServersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_generated_servers_address_fkey"),
    columns: z.tuple([z.literal("address")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("servers"),
    referencedColumns: z.tuple([z.literal("ip")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_generated_servers_match_id_fkey"),
    columns: z.tuple([z.literal("match_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const mapsRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  name: z.string(),
});

export const mapsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string(),
});

export const mapsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
});

export const matchConfigsRowSchema = z.object({
  channel: z.string().nullable(),
  created_at: z.string(),
  fixed_ratings: z.boolean(),
  guild: z.string().nullable(),
  id: z.number(),
  maps: z.number(),
  name: z.string(),
  owner: z.string(),
  player_expire: z.number(),
  size: z.number(),
  type: publicMatchTypeSchema,
  updated_at: z.string(),
  vehicles: z.boolean(),
  visible: z.boolean(),
});

export const matchConfigsInsertSchema = z.object({
  channel: z.string().optional().nullable(),
  created_at: z.string().optional(),
  fixed_ratings: z.boolean().optional(),
  guild: z.string().optional().nullable(),
  id: z.number().optional(),
  maps: z.number().optional(),
  name: z.string(),
  owner: z.string(),
  player_expire: z.number().optional(),
  size: z.number(),
  type: publicMatchTypeSchema.optional(),
  updated_at: z.string().optional(),
  vehicles: z.boolean().optional(),
  visible: z.boolean().optional(),
});

export const matchConfigsUpdateSchema = z.object({
  channel: z.string().optional().nullable(),
  created_at: z.string().optional(),
  fixed_ratings: z.boolean().optional(),
  guild: z.string().optional().nullable(),
  id: z.number().optional(),
  maps: z.number().optional(),
  name: z.string().optional(),
  owner: z.string().optional(),
  player_expire: z.number().optional(),
  size: z.number().optional(),
  type: publicMatchTypeSchema.optional(),
  updated_at: z.string().optional(),
  vehicles: z.boolean().optional(),
  visible: z.boolean().optional(),
});

export const matchConfigsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("match_configs_owner_fkey"),
    columns: z.tuple([z.literal("owner")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const matchDraftsRowSchema = z.object({
  created_at: z.string(),
  maps_draft: publicDraftTypeSchema.nullable(),
  match_id: z.number(),
  sign_up_channel: z.string().nullable(),
  sign_up_message: z.string().nullable(),
  summoning_channel: z.string().nullable(),
  teams_draft: publicDraftTypeSchema.nullable(),
});

export const matchDraftsInsertSchema = z.object({
  created_at: z.string().optional(),
  maps_draft: publicDraftTypeSchema.optional().nullable(),
  match_id: z.number().optional(),
  sign_up_channel: z.string().optional().nullable(),
  sign_up_message: z.string().optional().nullable(),
  summoning_channel: z.string().optional().nullable(),
  teams_draft: publicDraftTypeSchema.optional().nullable(),
});

export const matchDraftsUpdateSchema = z.object({
  created_at: z.string().optional(),
  maps_draft: publicDraftTypeSchema.optional().nullable(),
  match_id: z.number().optional(),
  sign_up_channel: z.string().optional().nullable(),
  sign_up_message: z.string().optional().nullable(),
  summoning_channel: z.string().optional().nullable(),
  teams_draft: publicDraftTypeSchema.optional().nullable(),
});

export const matchDraftsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("match_drafts_match_id_fkey"),
    columns: z.tuple([z.literal("match_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const matchMapsRowSchema = z.object({
  created_at: z.string().nullable(),
  map_id: z.number(),
  match_id: z.number(),
});

export const matchMapsInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  map_id: z.number(),
  match_id: z.number(),
});

export const matchMapsUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  map_id: z.number().optional(),
  match_id: z.number().optional(),
});

export const matchMapsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("match_maps_map_id_fkey"),
    columns: z.tuple([z.literal("map_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("maps"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("match_maps_match_id_fkey"),
    columns: z.tuple([z.literal("match_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const matchPlayerResultsRowSchema = z.object({
  created_at: z.string(),
  deaths: z.number(),
  info: jsonSchema.nullable(),
  join_time: z.number().nullable(),
  kills: z.number(),
  match_id: z.number(),
  player_id: z.string(),
  rating_inc: z.number().nullable(),
  score: z.number(),
  team: z.number(),
});

export const matchPlayerResultsInsertSchema = z.object({
  created_at: z.string().optional(),
  deaths: z.number(),
  info: jsonSchema.optional().nullable(),
  join_time: z.number().optional().nullable(),
  kills: z.number(),
  match_id: z.number().optional(),
  player_id: z.string(),
  rating_inc: z.number().optional().nullable(),
  score: z.number(),
  team: z.number().optional(),
});

export const matchPlayerResultsUpdateSchema = z.object({
  created_at: z.string().optional(),
  deaths: z.number().optional(),
  info: jsonSchema.optional().nullable(),
  join_time: z.number().optional().nullable(),
  kills: z.number().optional(),
  match_id: z.number().optional(),
  player_id: z.string().optional(),
  rating_inc: z.number().optional().nullable(),
  score: z.number().optional(),
  team: z.number().optional(),
});

export const matchPlayerResultsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("match_player_results_match_id_fkey"),
    columns: z.tuple([z.literal("match_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("match_player_results_player_id_fkey"),
    columns: z.tuple([z.literal("player_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("match_player_results_team_fkey"),
    columns: z.tuple([z.literal("team")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const matchPlayersRowSchema = z.object({
  captain: z.boolean(),
  connected_at: z.string().nullable(),
  expire_at: z.string().nullable(),
  match_id: z.number(),
  player_id: z.string(),
  rating: z.number(),
  ready: z.boolean(),
  role: publicMatchRoleSchema.nullable(),
  team: z.number().nullable(),
  updated_at: z.string(),
});

export const matchPlayersInsertSchema = z.object({
  captain: z.boolean().optional(),
  connected_at: z.string().optional().nullable(),
  expire_at: z.string().optional().nullable(),
  match_id: z.number(),
  player_id: z.string(),
  rating: z.number().optional(),
  ready: z.boolean().optional(),
  role: publicMatchRoleSchema.optional().nullable(),
  team: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const matchPlayersUpdateSchema = z.object({
  captain: z.boolean().optional(),
  connected_at: z.string().optional().nullable(),
  expire_at: z.string().optional().nullable(),
  match_id: z.number().optional(),
  player_id: z.string().optional(),
  rating: z.number().optional(),
  ready: z.boolean().optional(),
  role: publicMatchRoleSchema.optional().nullable(),
  team: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const matchPlayersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("match_players_match_id_fkey"),
    columns: z.tuple([z.literal("match_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("match_players_player_id_fkey"),
    columns: z.tuple([z.literal("player_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("match_players_team_fkey"),
    columns: z.tuple([z.literal("team")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const matchResultsRowSchema = z.object({
  created_at: z.string(),
  is_winner: z.boolean(),
  maps: z.number(),
  match_id: z.number(),
  rating_inc: z.number().nullable(),
  rounds: z.number(),
  team: z.number(),
  tickets: z.number(),
});

export const matchResultsInsertSchema = z.object({
  created_at: z.string().optional(),
  is_winner: z.boolean(),
  maps: z.number(),
  match_id: z.number(),
  rating_inc: z.number().optional().nullable(),
  rounds: z.number(),
  team: z.number(),
  tickets: z.number(),
});

export const matchResultsUpdateSchema = z.object({
  created_at: z.string().optional(),
  is_winner: z.boolean().optional(),
  maps: z.number().optional(),
  match_id: z.number().optional(),
  rating_inc: z.number().optional().nullable(),
  rounds: z.number().optional(),
  team: z.number().optional(),
  tickets: z.number().optional(),
});

export const matchResultsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("match_results_match_id_fkey"),
    columns: z.tuple([z.literal("match_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("match_results_team_fkey"),
    columns: z.tuple([z.literal("team")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const matchServersRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  server: z.string(),
});

export const matchServersInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number(),
  server: z.string(),
});

export const matchServersUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  server: z.string().optional(),
});

export const matchServersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("match_servers_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("match_servers_server_fkey"),
    columns: z.tuple([z.literal("server")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("servers"),
    referencedColumns: z.tuple([z.literal("ip")]),
  }),
]);

export const matchesRowSchema = z.object({
  away_team: z.number(),
  closed_at: z.string().nullable(),
  config: z.number(),
  created_at: z.string(),
  events: z.array(z.string()),
  home_team: z.number(),
  id: z.number(),
  live_at: z.string().nullable(),
  ready_at: z.string().nullable(),
  scheduled_at: z.string().nullable(),
  started_at: z.string().nullable(),
  status: publicMatchStatusSchema,
});

export const matchesInsertSchema = z.object({
  away_team: z.number().optional(),
  closed_at: z.string().optional().nullable(),
  config: z.number(),
  created_at: z.string().optional(),
  events: z.array(z.string()).optional(),
  home_team: z.number().optional(),
  id: z.number().optional(),
  live_at: z.string().optional().nullable(),
  ready_at: z.string().optional().nullable(),
  scheduled_at: z.string().optional().nullable(),
  started_at: z.string().optional().nullable(),
  status: publicMatchStatusSchema.optional(),
});

export const matchesUpdateSchema = z.object({
  away_team: z.number().optional(),
  closed_at: z.string().optional().nullable(),
  config: z.number().optional(),
  created_at: z.string().optional(),
  events: z.array(z.string()).optional(),
  home_team: z.number().optional(),
  id: z.number().optional(),
  live_at: z.string().optional().nullable(),
  ready_at: z.string().optional().nullable(),
  scheduled_at: z.string().optional().nullable(),
  started_at: z.string().optional().nullable(),
  status: publicMatchStatusSchema.optional(),
});

export const matchesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("matches_away_team_fkey"),
    columns: z.tuple([z.literal("away_team")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_config_fkey"),
    columns: z.tuple([z.literal("config")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("match_configs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("matches_home_team_fkey"),
    columns: z.tuple([z.literal("home_team")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const playerRatingsRowSchema = z.object({
  config: z.number(),
  created_at: z.string(),
  player_id: z.string(),
  rating: z.number(),
  updated_at: z.string(),
});

export const playerRatingsInsertSchema = z.object({
  config: z.number(),
  created_at: z.string().optional(),
  player_id: z.string(),
  rating: z.number().optional(),
  updated_at: z.string().optional(),
});

export const playerRatingsUpdateSchema = z.object({
  config: z.number().optional(),
  created_at: z.string().optional(),
  player_id: z.string().optional(),
  rating: z.number().optional(),
  updated_at: z.string().optional(),
});

export const playerRatingsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("player_ratings_config_fkey"),
    columns: z.tuple([z.literal("config")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("match_configs"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("player_ratings_player_id_fkey"),
    columns: z.tuple([z.literal("player_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const playersRowSchema = z.object({
  avatar_url: z.string(),
  beta_tester: z.boolean(),
  created_at: z.string(),
  id: z.string(),
  keyhash: z.string().nullable(),
  nick: z.string(),
  teamspeak_id: z.string().nullable(),
  updated_at: z.string(),
  user_id: z.string().nullable(),
});

export const playersInsertSchema = z.object({
  avatar_url: z.string(),
  beta_tester: z.boolean().optional(),
  created_at: z.string().optional(),
  id: z.string(),
  keyhash: z.string().optional().nullable(),
  nick: z.string(),
  teamspeak_id: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const playersUpdateSchema = z.object({
  avatar_url: z.string().optional(),
  beta_tester: z.boolean().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  keyhash: z.string().optional().nullable(),
  nick: z.string().optional(),
  teamspeak_id: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const playersDuplicateRowSchema = z.object({
  avatar_url: z.string().nullable(),
  beta_tester: z.boolean().nullable(),
  created_at: z.string().nullable(),
  id: z.string().nullable(),
  keyhash: z.string().nullable(),
  nick: z.string().nullable(),
  teamspeak_id: z.string().nullable(),
  updated_at: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const playersDuplicateInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  beta_tester: z.boolean().optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional().nullable(),
  keyhash: z.string().optional().nullable(),
  nick: z.string().optional().nullable(),
  teamspeak_id: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const playersDuplicateUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  beta_tester: z.boolean().optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional().nullable(),
  keyhash: z.string().optional().nullable(),
  nick: z.string().optional().nullable(),
  teamspeak_id: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const roundsRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  info: jsonSchema,
  map: z.number(),
  match: z.number().nullable(),
  server: z.string().nullable(),
  team1: z.number(),
  team1_tickets: z.string(),
  team2: z.number(),
  team2_tickets: z.string(),
});

export const roundsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  info: jsonSchema,
  map: z.number(),
  match: z.number().optional().nullable(),
  server: z.string().optional().nullable(),
  team1: z.number().optional(),
  team1_tickets: z.string(),
  team2: z.number().optional(),
  team2_tickets: z.string(),
});

export const roundsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  info: jsonSchema.optional(),
  map: z.number().optional(),
  match: z.number().optional().nullable(),
  server: z.string().optional().nullable(),
  team1: z.number().optional(),
  team1_tickets: z.string().optional(),
  team2: z.number().optional(),
  team2_tickets: z.string().optional(),
});

export const roundsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("rounds_map_fkey"),
    columns: z.tuple([z.literal("map")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("maps"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("rounds_match_fkey"),
    columns: z.tuple([z.literal("match")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("matches"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("rounds_server_fkey"),
    columns: z.tuple([z.literal("server")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("servers"),
    referencedColumns: z.tuple([z.literal("ip")]),
  }),
  z.object({
    foreignKeyName: z.literal("rounds_team1_fkey"),
    columns: z.tuple([z.literal("team1")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("rounds_team2_fkey"),
    columns: z.tuple([z.literal("team2")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const serverRconsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  rcon_port: z.number(),
  rcon_pw: z.string(),
});

export const serverRconsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string(),
  rcon_port: z.number().optional(),
  rcon_pw: z.string(),
});

export const serverRconsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  rcon_port: z.number().optional(),
  rcon_pw: z.string().optional(),
});

export const serverRconsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("server_rcons_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("servers"),
    referencedColumns: z.tuple([z.literal("ip")]),
  }),
]);

export const serversRowSchema = z.object({
  created_at: z.string(),
  demos_path: z.string(),
  ip: z.string(),
  name: z.string(),
  port: z.string(),
  updated_at: z.string(),
});

export const serversInsertSchema = z.object({
  created_at: z.string().optional(),
  demos_path: z.string(),
  ip: z.string(),
  name: z.string(),
  port: z.string().optional(),
  updated_at: z.string().optional(),
});

export const serversUpdateSchema = z.object({
  created_at: z.string().optional(),
  demos_path: z.string().optional(),
  ip: z.string().optional(),
  name: z.string().optional(),
  port: z.string().optional(),
  updated_at: z.string().optional(),
});

export const teamPlayersRowSchema = z.object({
  captain: z.boolean(),
  created_at: z.string(),
  player_id: z.string(),
  team_id: z.number(),
});

export const teamPlayersInsertSchema = z.object({
  captain: z.boolean().optional(),
  created_at: z.string().optional(),
  player_id: z.string(),
  team_id: z.number(),
});

export const teamPlayersUpdateSchema = z.object({
  captain: z.boolean().optional(),
  created_at: z.string().optional(),
  player_id: z.string().optional(),
  team_id: z.number().optional(),
});

export const teamPlayersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("team_players_player_id_fkey"),
    columns: z.tuple([z.literal("player_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("team_players_team_id_fkey"),
    columns: z.tuple([z.literal("team_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("teams"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const teamsRowSchema = z.object({
  active: z.boolean(),
  avatar: z.string().nullable(),
  created_at: z.string(),
  discord_role: z.string().nullable(),
  id: z.number(),
  name: z.string(),
  owner: z.string(),
});

export const teamsInsertSchema = z.object({
  active: z.boolean().optional(),
  avatar: z.string().optional().nullable(),
  created_at: z.string().optional(),
  discord_role: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string(),
  owner: z.string(),
});

export const teamsUpdateSchema = z.object({
  active: z.boolean().optional(),
  avatar: z.string().optional().nullable(),
  created_at: z.string().optional(),
  discord_role: z.string().optional().nullable(),
  id: z.number().optional(),
  name: z.string().optional(),
  owner: z.string().optional(),
});

export const teamsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("teams_owner_fkey"),
    columns: z.tuple([z.literal("owner")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const testMatchedClientsRowSchema = z.object({
  last_connected: z.string().nullable(),
  manual_match: z.string().nullable(),
  player_id: z.string().nullable(),
  player_nick: z.string().nullable(),
  similarity_score: z.number().nullable(),
  teamspeak_id: z.string(),
  ts3_username: z.string().nullable(),
});

export const testMatchedClientsInsertSchema = z.object({
  last_connected: z.string().optional().nullable(),
  manual_match: z.string().optional().nullable(),
  player_id: z.string().optional().nullable(),
  player_nick: z.string().optional().nullable(),
  similarity_score: z.number().optional().nullable(),
  teamspeak_id: z.string(),
  ts3_username: z.string().optional().nullable(),
});

export const testMatchedClientsUpdateSchema = z.object({
  last_connected: z.string().optional().nullable(),
  manual_match: z.string().optional().nullable(),
  player_id: z.string().optional().nullable(),
  player_nick: z.string().optional().nullable(),
  similarity_score: z.number().optional().nullable(),
  teamspeak_id: z.string().optional(),
  ts3_username: z.string().optional().nullable(),
});

export const testMatchedClientsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("player_id_fk"),
    columns: z.tuple([z.literal("player_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("players"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const ts3UidClientsImportRowSchema = z.object({
  "Last Connected Date": z.string().nullable(),
  "Unique Identifier": z.string(),
  Username: z.string().nullable(),
});

export const ts3UidClientsImportInsertSchema = z.object({
  "Last Connected Date": z.string().optional().nullable(),
  "Unique Identifier": z.string(),
  Username: z.string().optional().nullable(),
});

export const ts3UidClientsImportUpdateSchema = z.object({
  "Last Connected Date": z.string().optional().nullable(),
  "Unique Identifier": z.string().optional(),
  Username: z.string().optional().nullable(),
});
